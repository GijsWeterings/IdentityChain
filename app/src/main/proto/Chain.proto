syntax = "proto3";

import "Message.proto";

package message;

option java_package = "nl.tudelft.cs4160.identitychain.message";
option java_outer_classname = "ChainService";


message Peer {
    string hostname = 1;
    int32 port = 2;
    bytes publicKey = 3;
}

message PeerTrustChainBlock {
    Peer peer = 1;
    TrustChainBlock block = 2;
}

message PeerCrawlRequest {
    Peer peer = 1;
    CrawlRequest request = 2;
}

message CrawlResponse {
    Peer peer = 1;
    repeated TrustChainBlock block = 2;
}

message Empty {

}

message MetaZkp {
    PublicSetupResult zkp = 1;
    bytes ownerKey = 2;
    string meta = 3;
}

message PublicSetupResult {
    bytes c = 1;
    bytes c1 = 2;
    bytes c2 = 3;
    bytes cPrime = 4;
    bytes cDPrime = 5;
    bytes c1Prime = 6;
    bytes c2Prime = 7;
    bytes c3Prime = 8;
    bytes g = 9;
    bytes h = 10;
    bytes k1 = 11;
    bytes n = 12;
    CommittedIntegerProof sameCommitment = 13;
    CommittedIntegerProof cdPrimeIsSquare = 14;
    CommittedIntegerProof m3IsSquare = 15;
    int32 a = 16;
    int32 b = 17;
}

message CommittedIntegerProof {
    bytes g1 = 1;
    bytes g2 = 2;
    bytes h1 = 3;
    bytes h2 = 4;
    bytes E = 5;
    bytes F = 6;
    bytes c = 7;
    bytes D = 8;
    bytes D1 = 9;
    bytes D2 = 10;
}

message Key {
    bytes publicKey = 1;
}

message Challenge {
    //pubKey for the block
    bytes pubKey = 1;
    int32 seqNum = 2;
    // actual challenge numbers
    bytes s = 3;
    bytes t = 4;

    bytes accessPubKey = 5;
}

message ChallengeReply {
    bytes x = 1;
    bytes y = 2;
    bytes u = 3;
    bytes v = 4;
}

service Chain {
    rpc sendAttestationRequest (PeerTrustChainBlock) returns (Empty);
    rpc sendCrawlRequest (PeerCrawlRequest) returns (CrawlResponse);
    rpc getPublicKey (Empty) returns (Key);
    rpc sendLatestBlocks (CrawlResponse) returns (Key);
    rpc answerChallenge (Challenge) returns (ChallengeReply);
    rpc sendSignedBlock (PeerTrustChainBlock) returns (Empty);
}