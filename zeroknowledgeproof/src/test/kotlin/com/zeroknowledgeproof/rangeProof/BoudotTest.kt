package com.zeroknowledgeproof.rangeProof

import org.junit.Test
import java.math.BigInteger
import java.security.SecureRandom
import kotlin.test.assertTrue

class BoudotTest {

    val n = BigInteger("2540656995373090899072272285068086772584925537610063815844428548188111572947129857734423972808911104283387229457723387391988378207058064690775622518705258845824494592533818048025149982525535866259964238815377319986417044454321615765205083100149260291735681838216556576787099588437592385161521559971846273243109524214828955332575628860152593585650550708921209082333489220272571377497480121608789167913786131028010384405596872016895640019873266013991967746479431803250731192398564134056000093238645259243053965421322450456736530435135406967368614310966666164789928543920960866464552569258640931703494699354128531857112057237", 10)
    val g1 = BigInteger("733496069570323635649048014053623201007712017932230205512338071219834464051691560445458479570482650019510022999338735250299973080772710516244212565108484580323682593978471865541432896045629145953811474032760845730613272541263505028185161256845441008976794226055299046946889345910580580621244135212525873430323", 10)
    val h1 = BigInteger("1632715749065798030636279119040945806523409208099386203312207485136683740000705734942295655602478243466586439792090967651652066298536853752617562962691450409649464141625771067225340576820055308732061361806706137925229000194410754889386565335592216296396430540393588921229763913566823777319253672559046066037888", 10)
    val r1 = BigInteger("149172012740871097458740276582942284708591784823", 10)
    val g2 = BigInteger("171887426820293445919719932404558410803556810149098271450207315128961528994710705868150878629477134286522927584579029782208810774444582738260872067736712775615869906857907284877549816598336340574726873592465116230978977161731895811019346050354874943714602674158068627316404183836005946117263552137168289513377", 10)
    val h2 = BigInteger("133700786958555448334824420746123584187749280064132792559331202195557750652106054097982736801726164534118676040530578382961488384170596947525574184278188555169980084963178674217234131564960534960931850210713733402969317599246000270947041286048081066653786217857439027909024166139954083885267887249187571133011", 10)
    val r2 = BigInteger("617157561512497261977632911691841313088167998660", 10)

    val prover = RangeProofProver(19, 18, 100, n)


    @Test
    fun testEqualCommitted() {
        val commitedNum =BigInteger.valueOf(19)

        val y1 = g1.modPow(commitedNum, n).times(h1.modPow(r1, n)).mod(n)

        val y2 = g2.modPow(commitedNum, n).times(h2.modPow(r2, n)).mod(n)

        prover.proveTwoCommittedIntegersAreEqual(
                commitedNum,
                r1,
                r2,
                g1,
                h1,
                g2,
                h2,
                y1,
                y2
        )
    }

    @Test(expected = ZeroKnowledgeException::class)
    fun notEqualCommitted() {
        val commitedNum =BigInteger.valueOf(19)

        val y1 = g1.modPow(commitedNum, n).times(h1.modPow(r1, n)).mod(n)
        val y2 = g2.modPow(commitedNum + BigInteger.ONE, n).times(h2.modPow(r2, n)).mod(n)

        prover.proveTwoCommittedIntegersAreEqual(
                commitedNum,
                r1,
                r2,
                g1,
                h1,
                g2,
                h2,
                y1,
                y2
        )
    }

    @Test
    fun testCommittedSquare () {
        val commit = 1600
        val square = toBigInt(commit*commit)
        val y = g1.modPow(square, n).times(h1.modPow(r1,n)).mod(n)
        prover.proveCommittedNumberIsSquare(toBigInt(commit), r1, g1, h1, y)
    }

    @Test(expected = ZeroKnowledgeException::class)
    fun testCommittedNotSquare () {
        val commit = 1600
        val square = toBigInt(commit*commit) + BigInteger.ONE // Introduce error
        val y = g1.modPow(square, n).times(h1.modPow(r1,n)).mod(n)
        prover.proveCommittedNumberIsSquare(toBigInt(commit), r1, g1, h1, y)
    }
}