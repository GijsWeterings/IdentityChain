/*
 * Copyright 2017 ING Bank N.V.
 * This file is part of the go-ethereum library.
 *
 * The go-ethereum library is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * The go-ethereum library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with the go-ethereum library. If not, see <http://www.gnu.org/licenses/>.
 *
 */

package com.example.zeroknowledgeproof

import java.io.Serializable
import java.math.BigInteger


class SecretOrderGroup(
        /**
         * Large composite that defines a group Z*_N.
         */
        val n: BigInteger,
        /**
         * A generator for G, a cyclic subgroup of Z*_N with a large order. The order of this subgroup is secret.
         */
        val g: BigInteger,
        /**
         * Element of group generated by g.
         * This is a generator for a subgroup of G with large order, as needed for KDLCGSO.
         */
        val h: BigInteger) : Serializable {

    override fun toString(): String {
        return String.format("SecretOrderGroup(N=%s, g=%s, h=%s",
                n.toString(10), g.toString(10),  h.toString(10))
    }
}
